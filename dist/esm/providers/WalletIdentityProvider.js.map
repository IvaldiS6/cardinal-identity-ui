{"version":3,"file":"WalletIdentityProvider.js","sourceRoot":"","sources":["../../../lib/providers/WalletIdentityProvider.tsx"],"names":[],"mappings":";AAEA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEpD,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC;AAC/B,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAalD,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,CAAC,aAAa,CACtD,IAAI,CACL,CAAC;AAQF,MAAM,CAAC,MAAM,sBAAsB,GAAoB,CAAC,EACtD,OAAO,EACP,UAAU,EACV,QAAQ,GACF,EAAE,EAAE;IACV,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAgB,IAAI,CAAC,CAAC;IAC1D,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAoB,IAAI,CAAC,CAAC;IACtE,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAqB,SAAS,CAAC,CAAC;IACtE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAsB,SAAS,CAAC,CAAC;IAC/D,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAC;IAC3E,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAqB,SAAS,CAAC,CAAC;IAEpE,OAAO,CACL,MAAC,qBAAqB,CAAC,QAAQ,kBAC7B,KAAK,EAAE;YACL,IAAI,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,EAAE,EAAE;gBACzC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAClB,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC1B,UAAU,CAAC,OAAO,CAAC,CAAC;gBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC;YACD,MAAM;YACN,iBAAiB;SAClB,iBAED,KAAC,KAAK,kBACJ,MAAM,EAAE,iBAAiB,EACzB,SAAS,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAC5C,aAAa,EAAE,IAAI,gBAEnB,KAAC,SAAS,IACR,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,CAAC,MAAc,EAAE,EAAE;wBAC7B,SAAS,CAAC,MAAM,CAAC,CAAC;wBAClB,SAAS,CAAC,GAAG,EAAE;4BACb,oBAAoB,CAAC,KAAK,CAAC,CAAC;wBAC9B,CAAC,EAAE,IAAI,CAAC,CAAC;oBACX,CAAC,WACD,YACI,EACP,QAAQ,aACsB,CAClC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAmB,EAAE;IACpD,MAAM,QAAQ,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;IACnD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import type { Wallet } from \"@saberhq/solana-contrib\";\nimport type { Connection } from \"@solana/web3.js\";\nimport React, { useContext, useState } from \"react\";\n\nimport { ClaimCard } from \"..\";\nimport { Modal } from \"../modal\";\nimport { withSleep } from \"../utils/transactions\";\n\nexport interface WalletIdentity {\n  show: (\n    wallet: Wallet,\n    connection: Connection,\n    cluster: string,\n    dev?: boolean\n  ) => void;\n  handle: string | undefined;\n  showIdentityModal: boolean;\n}\n\nexport const WalletIdentityContext = React.createContext<WalletIdentity | null>(\n  null\n);\n\ninterface Props {\n  appName?: string;\n  appTwitter?: string;\n  children: React.ReactNode;\n}\n\nexport const WalletIdentityProvider: React.FC<Props> = ({\n  appName,\n  appTwitter,\n  children,\n}: Props) => {\n  const [wallet, setWallet] = useState<Wallet | null>(null);\n  const [connection, setConnection] = useState<Connection | null>(null);\n  const [cluster, setCluster] = useState<string | undefined>(undefined);\n  const [dev, setDev] = useState<boolean | undefined>(undefined);\n  const [showIdentityModal, setShowIdentityModal] = useState<boolean>(false);\n  const [handle, setHandle] = useState<string | undefined>(undefined);\n\n  return (\n    <WalletIdentityContext.Provider\n      value={{\n        show: (wallet, connection, cluster, dev) => {\n          setWallet(wallet);\n          setConnection(connection);\n          setCluster(cluster);\n          setDev(dev);\n          setShowIdentityModal(true);\n        },\n        handle,\n        showIdentityModal,\n      }}\n    >\n      <Modal\n        isOpen={showIdentityModal}\n        onDismiss={() => setShowIdentityModal(false)}\n        darkenOverlay={true}\n      >\n        <ClaimCard\n          dev={dev}\n          cluster={cluster}\n          wallet={wallet}\n          connection={connection}\n          appName={appName}\n          appTwitter={appTwitter}\n          onComplete={(handle: string) => {\n            setHandle(handle);\n            withSleep(() => {\n              setShowIdentityModal(false);\n            }, 1000);\n          }}\n        />\n      </Modal>\n      {children}\n    </WalletIdentityContext.Provider>\n  );\n};\n\nexport const useWalletIdentity = (): WalletIdentity => {\n  const identity = useContext(WalletIdentityContext);\n  if (!identity) {\n    throw new Error(\"Not in WalletIdentity context\");\n  }\n  return identity;\n};\n"]}