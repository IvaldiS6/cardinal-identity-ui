{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../lib/utils/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { withFindOrInitAssociatedTokenAccount } from \"@cardinal/certificates\";\nimport type { AccountData, EntryData } from \"@cardinal/namespaces\";\nimport * as namespaces from \"@cardinal/namespaces\";\nimport type { Wallet } from \"@saberhq/solana-contrib\";\nimport * as BufferLayout from \"@solana/buffer-layout\";\nimport * as splToken from \"@solana/spl-token\";\nimport * as web3 from \"@solana/web3.js\";\n\nimport { signAndSendTransaction } from \"./transactions\";\n\nexport function apiBase(dev?: boolean): string {\n  return `https://${dev ? \"dev-api\" : \"api\"}.cardinal.so`;\n}\n\nexport async function tryGetNameEntry(\n  connection: web3.Connection,\n  namespaceName: string,\n  entryName: string\n): Promise<AccountData<EntryData> | null> {\n  try {\n    const entry = await namespaces.getNameEntry(\n      connection,\n      namespaceName,\n      entryName\n    );\n    return entry;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function revokeAndClaim(\n  cluster: string,\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  duration: number | null,\n  reverseEntryId: web3.PublicKey,\n  claimRequestId: web3.PublicKey,\n  certificateMintId: web3.PublicKey,\n  certificateOwnerId: web3.PublicKey\n): Promise<string> {\n  const entry = await tryGetNameEntry(connection, namespaceName, entryName);\n  const transaction = new web3.Transaction();\n  if (!entry?.parsed.reverseEntry) {\n    await namespaces.withRevokeReverseEntry(\n      connection,\n      wallet,\n      namespaceName,\n      entryName,\n      reverseEntryId,\n      claimRequestId,\n      transaction\n    );\n  }\n  await namespaces.withRevokeEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    certificateOwnerId,\n    claimRequestId,\n    transaction\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  const txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n\n  const transaction2 = new web3.Transaction();\n  await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    duration || 0,\n    transaction2\n  );\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    transaction2\n  );\n  transaction2.feePayer = wallet.publicKey;\n  transaction2.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction2);\n  return web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction2.serialize()\n  );\n}\n\nexport async function setReverseEntry(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: web3.PublicKey\n): Promise<string> {\n  const transaction = await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    new web3.Transaction()\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  let txid = null;\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n  return txid;\n}\n\nexport async function initAndClaimEntry(\n  cluster: string,\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  duration: number | null\n): Promise<string> {\n  const certificateMint = web3.Keypair.generate();\n  const transaction = new web3.Transaction();\n  await namespaces.withInitEntry(\n    connection,\n    wallet,\n    certificateMint.publicKey,\n    namespaceName,\n    entryName,\n    transaction\n  );\n  await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMint.publicKey,\n    duration || 0,\n    transaction\n  );\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMint.publicKey,\n    transaction\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  await transaction.partialSign(certificateMint);\n  return web3.sendAndConfirmRawTransaction(connection, transaction.serialize());\n}\n\nexport async function claimEntry(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: web3.PublicKey,\n  duration: number | null\n): Promise<string> {\n  const transaction = await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    duration || 0,\n    new web3.Transaction()\n  );\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    transaction\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  let txid = null;\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n  return txid;\n}\n\nexport async function setEntryData(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  entryData: string\n): Promise<string> {\n  const transaction = await namespaces.withSetEntryData(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    new web3.PublicKey(entryData),\n    new web3.Transaction()\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  let txid = null;\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n  return txid;\n}\n\nexport async function approveClaimRequest(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  claimRequestId: web3.PublicKey\n): Promise<string> {\n  const transaction = await namespaces.withUpdateClaimRequest(\n    connection,\n    wallet,\n    namespaceName,\n    claimRequestId,\n    true,\n    new web3.Transaction()\n  );\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  let txid = null;\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n  return txid;\n}\n\nexport async function getPendingClaimRequests(connection: web3.Connection) {\n  return namespaces.getPendingClaimRequests(connection);\n}\n\nexport async function createClaimRequest(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string\n): Promise<string> {\n  return await signAndSendTransaction(\n    connection,\n    wallet,\n    await namespaces.withCreateClaimRequest(\n      connection,\n      wallet,\n      namespaceName,\n      entryName,\n      wallet.publicKey,\n      new web3.Transaction()\n    )\n  );\n}\n\nexport async function wrapSol(\n  connection: web3.Connection,\n  wallet: Wallet,\n  lamports: number\n): Promise<string> {\n  console.log(`Wrapping ${lamports} lamports`);\n  const transaction = new web3.Transaction();\n  const nativeAssociatedTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      splToken.NATIVE_MINT,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n  transaction.add(\n    web3.SystemProgram.transfer({\n      fromPubkey: wallet.publicKey,\n      toPubkey: nativeAssociatedTokenAccountId,\n      lamports,\n    })\n  );\n  transaction.add(createSyncNativeInstruction(nativeAssociatedTokenAccountId));\n  transaction.feePayer = wallet.publicKey;\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  await wallet.signTransaction(transaction);\n  return await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  );\n}\n\nexport function createSyncNativeInstruction(\n  nativeAccount: web3.PublicKey\n): web3.TransactionInstruction {\n  // @ts-ignore\n  const dataLayout = BufferLayout.struct([BufferLayout.u8(\"instruction\")]);\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 17, // SyncNative instruction\n    },\n    data\n  );\n\n  const keys = [{ pubkey: nativeAccount, isSigner: false, isWritable: true }];\n  return new web3.TransactionInstruction({\n    keys,\n    programId: splToken.TOKEN_PROGRAM_ID,\n    data,\n  });\n}\n"]}